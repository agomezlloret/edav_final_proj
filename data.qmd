# Data

## Description
The dataset was scraped by researcher and analyst Joe Hovde from the official NYC Marathon results page for the 2024 NYC Marathon, held on November 3, 2024. The official results page is maintained by the event organizers and provides a comprehensive record of all participantsâ€™ results.

The data is presented as a csv file with 17 columns and 55,525 rows. The columns include detailed attributes such as participant age, gender, country, overall time, pace, placement (overall and by category), and the number of marathons completed by each individual. With data on the run times and ages of 55 thousand runners, this is sure to be an interesting project!

This dataset is static for the 2024 marathon and future updates would depend on the availability of results from subsequent marathons and similar scraping efforts. Even though this is not a dynamic dataset, it could serve as a valuable component for an ongoing project that analyzes trends over multiple years, capturing the sheer talent that participates year after year.   

Questions for future research could center around analyzing impacts of national or global events and how that affects participation from certain countries. 

We will import the data into R using read.csv and then will take steps to pre-process the data and conduct any required cleaning before we begin to answer our posed questions. 

## Missing value analysis 

### Exploring missing values
```{r}
#| message: FALSE
data <- read.csv("NYC Marathon Results, 2024 - Marathon Runner Results.csv")
library(tidyr)
library(ggplot2)
library(dplyr)
```

```{r}
data <- data |> 
  mutate(across(where(is.character), ~ na_if(., "-"))) |> 
  mutate(across(where(is.character), ~ ifelse(. == "", NA, .)))

data <- data |> 
  mutate(across(where(is.integer), ~ na_if(., -1)))

# Drop IAAF Column
marathon_data <- data[,-9]

missing_values <- colSums(is.na(marathon_data))
missing_values

  
```
First, we decided to drop the 'IAAF' column as it was mostly redundant with the country trigraph column and overall does not provide necessary insight into the dataset. 

Looking at the original dataset, we observed that some columns contained blank entries, NA values, and "-" placeholders. To address this, we decided to transform the dataset by replacing blanks and "-" with NA. After this transformation, we found that 308 NA values remained in the 'stateProvince' column, 12 remained in the 'countryCode', 12 in 'bib', 12 in 'gender', and 62 in 'city'. Initially, we speculated that the missing values in 'stateProvince' might be due to certain countries not having a 'stateProvince' field for competitors to fill in. However, upon further investigation, we filtered for missing values in the 'stateProvince' column and identified distinct 'countryCode' values. This revealed that the USA also had missing entries, suggesting that some competitors chose not to provide a 'stateProvince' value.

```{r fig.height=12, fig.width= 12}
unique_country_codes <- marathon_data |> 
  filter(is.na(stateProvince)) |> 
  count(countryCode) 

unique_country_codes$countryCode[is.na(unique_country_codes$countryCode)] <- "Unknown"

unique_country_codes <- unique_country_codes |> 
  mutate(countryCode = reorder(countryCode, n)) 

ggplot(unique_country_codes, aes(x = n, y = countryCode)) +
  geom_bar(stat = "identity", fill = "lightpink") +
  geom_text(aes(label=n), vjust = .5, hjust = 0, color = 'darkblue') +
  labs(title = "Missing stateProvince Values by Country",
       x = "Missing Values",
       y = "Country Code") +
  theme_minimal()
```

In order to correctly sort the instances of missing values per country code, we needed to rename the missing country code values from NA to "Unknown" so that ggplot would recognize it and include it in the ordering. 
Somewhat surprising is the fact that USA is in the upper quartile of missing values, considering that every participating US runner has an associated state that they could have included in their registration.

```{r}
#| warning: FALSE

library(ggcorrplot)

missing_matrix <- is.na(marathon_data)

# Compute the correlation matrix of missingness
missing_corr <- cor(missing_matrix, use = "pairwise.complete.obs")

# Plot the correlation matrix
ggcorrplot(missing_corr, title = "Correlation of Missing Data", lab = TRUE)
```

Plotting a correlation heat map helps us identify if missing values in one column is correlated with missing values in another column. 
From this plot, we see that 'countryCode', 'bib', and 'gender' have a strong correlation which tells us that these values always have missing values simultaneously. 
'City', 'countryCode', 'bib', and 'gender' have moderate correlations across each column which could suggest that if a value is missing in one of the 3 columns, then there's a higher chance that 'city' is missing a value as well for that entry.

```{r}
# Filter rows where "city" is missing 
city_na_rows <- marathon_data |>
  filter(is.na(city))

# Count occurrences of countryCode in rows with missing city
country_counts_city_na <- city_na_rows |>
  count(countryCode, sort = TRUE)

#country_counts_city_na
```

```{r}
country_counts_city_na <- country_counts_city_na |>
  mutate(proportion_missing = n / sum(n))

country_counts_full <- marathon_data |>
  count(countryCode, sort = TRUE) |>
  mutate(proportion_full = n / sum(n))

country_comparison_city_na <- country_counts_city_na |>
  left_join(country_counts_full, by = "countryCode", suffix = c("_missing", "_full"))

# View the comparison
#country_comparison_city_na
```

```{r}
ggplot(country_comparison_city_na, aes(x = reorder(countryCode, proportion_missing), y = proportion_missing)) +
  geom_bar(stat = "identity", fill = "blue", alpha = 0.6) +
  geom_point(aes(y = proportion_full), color = "red", size = 3) +
  coord_flip() +
  labs(title = "Proportion of Missing `city` by Country",
       x = "Country Code",
       y = "Proportion") +
  theme_minimal()
```

In this bar plot, we're comparing the proportions of 'countryCode' values in rows with missing 'city' versus the entire marathon dataset. The goal is to identify whether the rows with missing 'city' values are disproportionately associated with certain countries. 

Blue bars represent the proportion of rows with missing 'city' values for each 'countryCode'. The red dots show the proportion of rows for each 'countryCode' in the entire dataset (to include rows where 'city' is not missing a value). 

The blue bars highlight the countries contributing to rows with missing 'city' values with the red dots providing a baseline to compare whether a country is over represented or underrepresented in rows with missing 'city' values compared to their overall representation with the dataset. 

From this, we can see that the USA makes up around 70% of the total dataset meaning most runners are from the US. Even with this large percentage of runners, only about 2% of the rows with missing 'city' values are associated with the US. This could indicate that the data collection process for US participants is more robust than for international participants. It could also represent a systemic issue where missing city values disproportionately occur for non-USA participants. 

Countries like ITA, MEX, and NLD seem to be highly affected by missing 'city 'values. 

### Dealing with missing values
Since stateProvince has the largest percentage of missing values out of all the columns, we want to fill out these appropriately. We are interested in looking at US primarily, so we'll focus on filling out the NAs in stateProvince where country equals US
```{r}
#Filtering for missing values where country is USA and either city or stateProvince are missing
usa_missing_values <- marathon_data |> 
  filter(countryCode == "USA" & (is.na(city) | is.na(stateProvince)))
#Showed Austin and NYC have missing stateProvince, so imputing with TX and NY accordingly

marathon_data <- marathon_data |> 
  mutate(stateProvince = case_when(
    city == "Austin" & is.na(stateProvince) ~ "TX",
    city == "New York" & is.na(stateProvince) ~ "NY",
    TRUE ~ stateProvince
  ))

usa_missing_values <- marathon_data |> 
  filter(countryCode == "USA" & (is.na(city) | is.na(stateProvince)))

```


```{r}
marathon_data_missing_country <- marathon_data |> 
  filter(is.na(countryCode))

marathon_data_clean <- marathon_data |> 
  filter(!is.na(countryCode))
```
Noticed there are 12 rows with missing countryCode, that also have firstName as "Anonymous" and have city, gender, bib, stateProvince as NA and age as 0. Because of the lack of information, we decided to drop these rows. 

```{r}

write.csv(marathon_data_clean, "marathon_data_clean.csv", row.names = FALSE)
```

## Analysis 

Question 1: When (in terms of age) are most participants running?
```{r}
library(ggplot2)
ggplot(marathon_data_clean, aes(x = age)) +
  geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Age Distribution of Marathon Participants", 
       x = "Age", 
       y = "Count") +
  theme_minimal()
```
Observations: 


Question 2: Are males or females more likely to run?
```{r}
gender_clean <- marathon_data_clean |> 
  filter(gender %in% c("M", "W"))

gender_clean <- gender_clean |> 
  mutate(age_group = case_when(
    age >= 18 & age <= 29 ~ "18-29",
    age >= 30 & age <= 39 ~ "30-39",
    age >= 40 & age <= 49 ~ "40-49",
    age >= 50 & age <= 59 ~ "50-59",
    age >= 60 ~ "60+",
    TRUE ~ "Unknown"
  ))

gender_age_percentages <- gender_clean |> 
  group_by(age_group, gender) |> 
  summarise(count = n(), .groups = 'drop') |> 
  group_by(age_group) |> 
  mutate(percentage = (count / sum(count)) * 100)

ggplot(gender_age_percentages, aes(x = percentage, y = age_group, fill = gender)) +
  geom_bar(stat = "identity", position = "stack", width = 0.7) +
  labs(title = "Gender Participation by Age Group",
       x = "Percentage of Participants (%)", 
       y = "Age Group") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
Observations:

Question 3: On average, which are the fastest top 10 countries?
```{r}
library(lubridate)

# Convert 'overallTime' to seconds for calculations
marathon_data_clean <- marathon_data_clean |> 
  filter(!is.na(overallTime)) |> 
  mutate(overallTime = hms(overallTime),   # Parse to 'Period' object
         overallTimeSec = as.numeric(overallTime),
         countryCode = if_else(countryCode == "Sai", "SAI", countryCode))  # Convert to seconds

# Calculate average finish time by country (in seconds), filter for top 20
country_avg_time <- marathon_data_clean |> 
  group_by(countryCode) |> 
  summarise(avg_time_sec = mean(overallTimeSec, na.rm = TRUE)) |> 
  arrange(avg_time_sec) |> 
  head(20) |> 
  mutate(avg_time_hours = avg_time_sec / 3600) 

# Plot average finish times in hours
ggplot(country_avg_time, aes(x = avg_time_hours, y = reorder(countryCode, avg_time_hours))) +
  geom_point(size = 4, color = "steelblue") +  
  geom_segment(aes(xend = 0, yend = countryCode), color = "gray") +  
  labs(title = "Fastest Countries by Average Finish Time (NYC Marathon 2024)",
       x = "Average Finish Time (hours)",
       y = "Country") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8))  

```
Observations:

Question 4: Who is the fastest agre group by gender?
```{r}
gender_clean <- gender_clean |> 
  mutate(overallTimeSec = as.numeric(hms(overallTime)))

ggplot(gender_clean, aes(x = age_group, y = overallTimeSec, fill = gender)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) + 
  labs(title = "Finish Times by Age Group and Gender", 
       x = "Age Group", 
       y = "Finish Time (seconds)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
Observations:

Question 5: Is there a correlation between the number of races a participant has ran and their finish time?
```{r}
# Ensure avg_time_hours and age_group are created
hrs_avg_time <- gender_clean |> 
  mutate(
    avg_time_hours = overallTimeSec / 3600,  
    age_group = case_when(                  
      age >= 18 & age <= 29 ~ "18-29",
      age >= 30 & age <= 39 ~ "30-39",
      age >= 40 & age <= 49 ~ "40-49",
      age >= 50 & age <= 59 ~ "50-59",
      age >= 60 ~ "60+",
      TRUE ~ "Unknown"
    )
  )

# Plot density of race count by finish time faceted by age group
ggplot(hrs_avg_time, aes(x = racesCount, y = avg_time_hours)) +
  geom_point(alpha = 0.3, size = 0.5 ,color = "blue") +      
  facet_wrap(~ age_group, scales = "free") +    
  labs(title = "Race Count vs Finish Time by Age Group",
       x = "Number of Races Completed",
       y = "Finish Time (hours)") +
  theme_minimal()

```

## Summary
Overall, the missing values from this dataset could be explained for a few plausible reasons:

- Errors in transferring from paper to digital data entry for registrants that filled out paper forms. With USA's domination of online systems, this could explain the low percentage of missing values. 
- Technical issues or runner actions such as discarding the bib during the race due to it causing discomfort could result in bib and other associated data like countryCode and city to be flagged as missing. 

## Future Analysis
To hone in on some of these thoughts for further exploration, we could look for data that contains registration times to see if missing values were concentrated among participants who registered late or early.
